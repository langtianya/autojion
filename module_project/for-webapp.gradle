//专门给webapp使用的gradle配置

//打war包需要引用war插件
apply plugin: 'war'

//定义依赖的项目、jar包
// In this section you declare the dependencies for your production and test code
dependencies {

//定义编译的目标为项目根目录的libs文件夹下符合规则的文件
//include: '**/*.jar'包含所有当前目录和子目录的jar文件，多个请用[n1,n2,..]格式，下同。
//exclude:'for-dev/*.jar'排除for-dev目录下所有的jar包
//fileTree(dir:path,include,exclude)方式查找需要的文件

    // The production code uses the...at compile time
      //在编译的时候需要依赖，在运行的时候也需要,就用compile。rootProject是根项目对象
    compile fileTree(dir: rootProject.projectDir.absolutePath + '/libs', include: '**/*.jar', exclude:'for-dev/*.jar')
	 
	//仅在编译的时候需要，但是在运行时不需要依赖,就用providedCompile
    providedCompile fileTree(dir: rootProject.projectDir.absolutePath + '/libs', include: 'for-dev/*.jar')
	
	  // Declare the dependency for your favourite test framework you want to use in your tests.
    //testCompile 'junit:junit:4.12'
}

//打war包
war {
    //版本
    version = rootProject.sysVersion
	//策略
	//overridden
	//This strategy can be overridden for individual files by using eachFile(org.gradle.api.Action) or filesMatching
	//see https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/AbstractCopyTask.html
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	//目标目录
    destinationDir = rootProject.buildDistDir
    
	//生成manifest信息
    manifest {
        attributes("Implementation-Title": "Gradle",
		            "Company" : "wangzhe",
                   "Implementation-Version": rootProject.sysVersion,               
                   "warVersion" : "v" + rootProject.dtVersion)
    }
    
	//排除不需要打war包的文件
	//排除掉其他模块生成的临时文件，比如在开发测试期间从其他模块生成到web项目的i18n，js,jsp,image等，这些文件在运行时需要，打包时由于已
	//存在于模块中，这里就不需要重复打包
    exclude 'WEB-INF/classes'
    exclude 'webapp/i18n'
	exclude '/src/main/webapp/pc'
	exclude '/src/main/webapp/mobile'
}

eclipse.classpath.defaultOutputDir = file("src/main/webapp/WEB-INF/classes")

//打包前做一些清理工作
task cleanWebapp << {

    //清空测试运行时需要的i18n
    File destFile = file(projectDir.absolutePath + '/src/main/webapp/i18n')
    if (destFile.exists()) {
        FileCollection files = files {destFile.listFiles()}
        files.each {File file ->
               delete file
        }
    }  
	//清空上次测试所用jetty文件
    destFile = file(projectDir.absolutePath + '/src/test/jetty-sup')
    if (destFile.exists()) {
        FileCollection files = files {destFile.listFiles()}
        files.each {File file ->
           delete file
        }
    }
    //把新的jetty部署文件复制到测试目录
    copy {
        from projectDir.absolutePath + '/src/main/jetty/deploy/resources'
        into projectDir.absolutePath + '/src/test/jetty-sup'
    }
    //删除jetty相关文件
    destFile = file(projectDir.absolutePath + '/src/main/jetty/deploy/webapps')
    if (destFile.exists()) {
        FileCollection files = files {destFile.listFiles()}
        files.each {File file ->
           delete file
        }
    }
    //删除webapp的class文件
    destFile = file(projectDir.absolutePath + '/src/main/webapp/WEB-INF/classes')
    if (destFile.exists()) {
        FileCollection files = files {destFile.listFiles()}
        files.each {File file ->
           delete file
        }
    }
     //删除测试用的pc端文件
    destFile = file(projectDir.absolutePath + '/src/main/webapp/pc')
    if (destFile.exists()) {
	    destFile.eachDir { dir ->
	            delete dir
	    }
    }
    //删除测试用的mobile端文件
    destFile = file(projectDir.absolutePath + '/src/main/webapp/mobile')
    if (destFile.exists()) {
        destFile.eachDir { dir ->
                delete dir
        }
    }
}
//clean任务执行前，先执行cleanWebapp
clean.dependsOn cleanWebapp

//配置jetty在eclipse的运行文件
task jettyLaunchForEclipse << {

   //读取项目根目录的config文件下的jetty运行配置文件，这时xml形式的配置文件
    Node xml = new XmlParser().parse(new File(rootProject.projectDir+'/config', "jetty-sup-webapp.launch.tpl"))
	//删除当项目目录下的运行文件
    def launchFile = new File ( projectDir, project.name + "-run.launch" )
    if (launchFile.exists()) {
        launchFile.delete()
    }
    //从xml查找指定key，如果找到，设置key对应的值
	//环境
    xml.stringAttribute.find{it.@key == "net.sourceforge.eclipsejetty.launcher.context"}.attributes()['value'] = "/"
	//jetty默认web配置
    xml.stringAttribute.find{it.@key == "net.sourceforge.eclipsejetty.launcher.customWebDefaults.resource"}.attributes()['value'] = "/" + eclipse.project.name + "/src/main/jetty/etc/webdefault.xml"
	//jndi配置
    xml.stringAttribute.find{it.@key == "net.sourceforge.eclipsejetty.launcher.jetty.config.path.1"}.attributes()['value'] = "/" + eclipse.project.name + "/src/main/jetty/deploy/resources/jndi-ds.xml"
	//jetty path
    xml.stringAttribute.find{it.@key == "net.sourceforge.eclipsejetty.launcher.jetty.path"}.attributes()['value'] = rootProject.jetty_home
	//项目属性
    xml.stringAttribute.find{it.@key == "org.eclipse.jdt.launching.PROJECT_ATTR"}.attributes()['value'] = eclipse.project.name
	//工作目录
    xml.stringAttribute.find{it.@key == "org.eclipse.jdt.launching.WORKING_DIRECTORY"}.attributes()['value'] = "\${" + "workspace_loc:" + eclipse.project.name + "/src/test/jetty-sup}"
    
	//设置classEntry
    def classEntry = xml.listAttribute[0].listEntry
    classEntry[0].attributes()['value'] = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <runtimeClasspathEntry containerPath=\""+rootProject.eclipseJreContainer+"\" for-javase=\""+eclipse.project.name+"\" path=\"1\" type=\"4\"/>"
    classEntry[1].attributes()['value'] = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <runtimeClasspathEntry id=\"org.eclipse.jdt.launching.classpathentry.defaultClasspath\"> <memento exportedEntriesOnly=\"false\" project=\""+eclipse.project.name+"\"/></runtimeClasspathEntry>"
    classEntry[2].attributes()['value'] = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <runtimeClasspathEntry internalArchive=\"/"+eclipse.project.name+"/src/main/jetty/deploy/resources\" path=\"3\" type=\"2\"/>"
    classEntry[3].attributes()['value'] = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <runtimeClasspathEntry internalArchive=\"/"+eclipse.project.name+"/src/main/jetty/resources\" path=\"3\" type=\"2\"/>"
    
	//把处理好的运行配置数据写入运行文件
    new XmlNodePrinter(new PrintWriter(new FileWriter(launchFile))).print(xml)
	
    println '----------------------------jetty launch file create done----------------------------'
}
//仅仅在jetty_home不为空的时候才会运行jettyLaunchForEclipse任务。可以用tomcat等容器代替
jettyLaunchForEclipse.onlyIf {rootProject.property('jetty_home') != null}

//往系统配置文件设置发布（版本号，时间等）信息
task updateSysConfigVersionInfo << {
     //往src/main/jetty/deploy/resources/sysConfig.properties设置发版本信息
    ant.propertyfile(file: "src/main/jetty/deploy/resources/sysConfig.properties"){
	//发布日期
     entry(key: 'version.releaseDate', value: rootProject.packDate) 
	//系统版本
     entry(key: 'version.number', value: rootProject.sysVersion) 
    }
}


//从jetty样例webapp.xml中读取内容，写入目标webapp.xml文件，并替换归档名
task createWebappXml {

    //替换本web项目中webapp-sample.xml文件中的归档名
    def webappFile = new File(projectDir, "src/main/jetty/etc/webapp-sample.xml")
	//读取目标webappFile
    def destWebappFile = new File(projectDir, "src/main/jetty/deploy/webapps/" + war.archiveName[0..-4] + "xml");
	
	//定义扩展属性
    ext.destWebappFile = destWebappFile
	//任务运行最后,从webappFile读取内容，写入destWebappFile,Writer writer是写入器，Reader reader是读取器
    doLast {
		destWebappFile.withWriter("UTF-8") { Writer writer ->
			webappFile.withReader("UTF-8") { Reader reader ->
			//读取行
				reader.tranwzormLine(writer) { String line ->
				//替换遍历
					line.replaceAll('@warArchiveName@', war.archiveName)
				}
			}
		}
	}
}

//打war包并创建webappxml文件
task warAndWebappXml {
    dependsOn war, createWebappXml
    doLast{
	//最后重命名输出目标webapp xml到项目根目录
        createWebappXml.destWebappFile.renameTo(file(rootProject.destinationDir.absolutePath + "/" + createWebappXml.destWebappFile.name))
    }
}

//打war包，用来运行。更新系统配置信息->打war包->创建webappxml文件
task packWarForRun(type: Zip) {
    dependsOn updateSysConfigVersionInfo, createWebappXml
	//目标目录
    destinationDir = rootProject.buildDistDir
	//基本名称
    baseName = project.name + 'jetty'
	//版本
    version = rootProject.sysVersion
	
	//从..读取文件写入/jetty/deploy/webapps
    into('/jetty/deploy/webapps'){
       from war.outputs.files
    }
	//从destWebappFile读取，复制到
    into('/jetty/deploy/webapps') {
        from createWebappXml.destWebappFile
    }
	//从以下目录读取文件写入/jetty
    into('/jetty'){	
	//读取jetty文件读取文件
       from ('src/main/jetty')
	   //排除
       exclude('etc/webapp-sample.xml')
       exclude('deploy/webapps/*.*')
    }
	//读取jety lib支持
    into('jetty/lib/ext'){
       from(rootProject.projectDir.absolutePath + '/libs/jetty-ext')
    }
	
	//删除destWebappFile
    doLast {
        if (createWebappXml.destWebappFile.exists()) {
            createWebappXml.destWebappFile.delete()
        }
    }
}

//打war包，用来发布。更新系统配置信息->打war包->创建webappxml文件，并把war包放入zip文件
task packWarForDeply(type: Zip) {
    dependsOn updateSysConfigVersionInfo, createWebappXml
    destinationDir = rootProject.buildDistDir
    baseName = project.name + '-deploy'
    version = rootProject.sysVersion
	
    into('/deploy/webapps'){
       from war.outputs.files
    }
    into('/deploy/webapps') {
        from createWebappXml.destWebappFile
    }
	//读取jetty部署资源
    into('/deploy/resources'){
        from ('src/main/jetty/deploy/resources')
    }
	//删除destWebappFile
    doLast {
        if (createWebappXml.destWebappFile.exists()) {
            createWebappXml.destWebappFile.delete()
        }
    }
}
